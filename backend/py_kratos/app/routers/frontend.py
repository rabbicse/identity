# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2024-10-22T11:04:04+00:00

from __future__ import annotations

from fastapi import APIRouter

from ..dependencies import *

router = APIRouter(tags=['frontend'])


@router.get('/.well-known/ory/webauthn.js', response_model=str, tags=['frontend'])
def get_web_authn_java_script() -> str:
    """
    Get WebAuthn JavaScript
    """
    pass


@router.get(
    '/self-service/errors',
    response_model=FlowError,
    responses={
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        '500': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def get_flow_error(id: str) -> Union[FlowError, ErrorGeneric]:
    """
    Get User-Flow Errors
    """
    pass


@router.post(
    '/self-service/login',
    response_model=SuccessfulNativeLogin,
    responses={
        '400': {'model': LoginFlow},
        '410': {'model': ErrorGeneric},
        '422': {'model': ErrorBrowserLocationChangeRequired},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def update_login_flow(
    flow: str,
    x__session__token: Optional[str] = Header(None, alias='X-Session-Token'),
    cookie: Optional[str] = Header(None, alias='Cookie'),
    body: Union[
        UpdateLoginFlowWithPasswordMethod,
        UpdateLoginFlowWithOidcMethod,
        UpdateLoginFlowWithTotpMethod,
        UpdateLoginFlowWithWebAuthnMethod,
        UpdateLoginFlowWithLookupSecretMethod,
        UpdateLoginFlowWithCodeMethod,
        UpdateLoginFlowWithPasskeyMethod,
        UpdateLoginFlowWithIdentifierFirstMethod,
    ] = ...,
) -> Union[
    SuccessfulNativeLogin, LoginFlow, ErrorGeneric, ErrorBrowserLocationChangeRequired
]:
    """
    Submit a Login Flow
    """
    pass


@router.get(
    '/self-service/login/api',
    response_model=LoginFlow,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def create_native_login_flow(
    refresh: Optional[bool] = None,
    aal: Optional[str] = None,
    x__session__token: Optional[str] = Header(None, alias='X-Session-Token'),
    return_session_token_exchange_code: Optional[bool] = None,
    return_to: Optional[str] = None,
    via: Optional[str] = None,
) -> Union[LoginFlow, ErrorGeneric]:
    """
    Create Login Flow for Native Apps
    """
    pass


@router.get(
    '/self-service/login/browser',
    response_model=LoginFlow,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def create_browser_login_flow(
    refresh: Optional[bool] = None,
    aal: Optional[str] = None,
    return_to: Optional[str] = None,
    cookie: Optional[str] = Header(None, alias='Cookie'),
    login_challenge: Optional[str] = None,
    organization: Optional[str] = None,
    via: Optional[str] = None,
) -> Union[LoginFlow, ErrorGeneric]:
    """
    Create Login Flow for Browsers
    """
    pass


@router.get(
    '/self-service/login/flows',
    response_model=LoginFlow,
    responses={
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        '410': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def get_login_flow(
    id: str, cookie: Optional[str] = Header(None, alias='Cookie')
) -> Union[LoginFlow, ErrorGeneric]:
    """
    Get Login Flow
    """
    pass


@router.get(
    '/self-service/logout',
    response_model=None,
    responses={'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def update_logout_flow(
    token: Optional[str] = None,
    return_to: Optional[str] = None,
    cookie: Optional[str] = Header(None, alias='Cookie'),
) -> Optional[ErrorGeneric]:
    """
    Update Logout Flow
    """
    pass


@router.delete(
    '/self-service/logout/api',
    response_model=None,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def perform_native_logout(body: PerformNativeLogoutBody) -> Optional[ErrorGeneric]:
    """
    Perform Logout for Native Apps
    """
    pass


@router.get(
    '/self-service/logout/browser',
    response_model=LogoutFlow,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        '500': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def create_browser_logout_flow(
    cookie: Optional[str] = None, return_to: Optional[str] = None
) -> Union[LogoutFlow, ErrorGeneric]:
    """
    Create a Logout URL for Browsers
    """
    pass


@router.post(
    '/self-service/recovery',
    response_model=RecoveryFlow,
    responses={
        '400': {'model': RecoveryFlow},
        '410': {'model': ErrorGeneric},
        '422': {'model': ErrorBrowserLocationChangeRequired},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def update_recovery_flow(
    flow: str,
    token: Optional[str] = None,
    cookie: Optional[str] = Header(None, alias='Cookie'),
    body: Union[
        UpdateRecoveryFlowWithLinkMethod, UpdateRecoveryFlowWithCodeMethod
    ] = ...,
) -> Union[RecoveryFlow, ErrorGeneric, ErrorBrowserLocationChangeRequired]:
    """
    Update Recovery Flow
    """
    pass


@router.get(
    '/self-service/recovery/api',
    response_model=RecoveryFlow,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def create_native_recovery_flow() -> Union[RecoveryFlow, ErrorGeneric]:
    """
    Create Recovery Flow for Native Apps
    """
    pass


@router.get(
    '/self-service/recovery/browser',
    response_model=RecoveryFlow,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def create_browser_recovery_flow(
    return_to: Optional[str] = None,
) -> Union[RecoveryFlow, ErrorGeneric]:
    """
    Create Recovery Flow for Browsers
    """
    pass


@router.get(
    '/self-service/recovery/flows',
    response_model=RecoveryFlow,
    responses={
        '404': {'model': ErrorGeneric},
        '410': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def get_recovery_flow(
    id: str, cookie: Optional[str] = Header(None, alias='Cookie')
) -> Union[RecoveryFlow, ErrorGeneric]:
    """
    Get Recovery Flow
    """
    pass


@router.post(
    '/self-service/registration',
    response_model=SuccessfulNativeRegistration,
    responses={
        '400': {'model': RegistrationFlow},
        '410': {'model': ErrorGeneric},
        '422': {'model': ErrorBrowserLocationChangeRequired},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def update_registration_flow(
    flow: str,
    cookie: Optional[str] = Header(None, alias='Cookie'),
    body: Union[
        UpdateRegistrationFlowWithPasswordMethod,
        UpdateRegistrationFlowWithOidcMethod,
        UpdateRegistrationFlowWithWebAuthnMethod,
        UpdateRegistrationFlowWithCodeMethod,
        UpdateRegistrationFlowWithPasskeyMethod,
        UpdateRegistrationFlowWithProfileMethod,
    ] = ...,
) -> Union[
    SuccessfulNativeRegistration,
    RegistrationFlow,
    ErrorGeneric,
    ErrorBrowserLocationChangeRequired,
]:
    """
    Update Registration Flow
    """
    pass


@router.get(
    '/self-service/registration/api',
    response_model=RegistrationFlow,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def create_native_registration_flow(
    return_session_token_exchange_code: Optional[bool] = None,
    return_to: Optional[str] = None,
) -> Union[RegistrationFlow, ErrorGeneric]:
    """
    Create Registration Flow for Native Apps
    """
    pass


@router.get(
    '/self-service/registration/browser',
    response_model=RegistrationFlow,
    responses={'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def create_browser_registration_flow(
    return_to: Optional[str] = None,
    login_challenge: Optional[str] = None,
    after_verification_return_to: Optional[str] = None,
    organization: Optional[str] = None,
) -> Union[RegistrationFlow, ErrorGeneric]:
    """
    Create Registration Flow for Browsers
    """
    pass


@router.get(
    '/self-service/registration/flows',
    response_model=RegistrationFlow,
    responses={
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        '410': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def get_registration_flow(
    id: str, cookie: Optional[str] = Header(None, alias='Cookie')
) -> Union[RegistrationFlow, ErrorGeneric]:
    """
    Get Registration Flow
    """
    pass


@router.post(
    '/self-service/settings',
    response_model=SettingsFlow,
    responses={
        '400': {'model': SettingsFlow},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '410': {'model': ErrorGeneric},
        '422': {'model': ErrorBrowserLocationChangeRequired},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def update_settings_flow(
    flow: str,
    x__session__token: Optional[str] = Header(None, alias='X-Session-Token'),
    cookie: Optional[str] = Header(None, alias='Cookie'),
    body: Union[
        UpdateSettingsFlowWithPasswordMethod,
        UpdateSettingsFlowWithProfileMethod,
        UpdateSettingsFlowWithOidcMethod,
        UpdateSettingsFlowWithTotpMethod,
        UpdateSettingsFlowWithWebAuthnMethod,
        UpdateSettingsFlowWithLookupMethod,
        UpdateSettingsFlowWithPasskeyMethod,
    ] = ...,
) -> Union[SettingsFlow, ErrorGeneric, ErrorBrowserLocationChangeRequired]:
    """
    Complete Settings Flow
    """
    pass


@router.get(
    '/self-service/settings/api',
    response_model=SettingsFlow,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def create_native_settings_flow(
    x__session__token: Optional[str] = Header(None, alias='X-Session-Token')
) -> Union[SettingsFlow, ErrorGeneric]:
    """
    Create Settings Flow for Native Apps
    """
    pass


@router.get(
    '/self-service/settings/browser',
    response_model=SettingsFlow,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def create_browser_settings_flow(
    return_to: Optional[str] = None,
    cookie: Optional[str] = Header(None, alias='Cookie'),
) -> Union[SettingsFlow, ErrorGeneric]:
    """
    Create Settings Flow for Browsers
    """
    pass


@router.get(
    '/self-service/settings/flows',
    response_model=SettingsFlow,
    responses={
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        '410': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def get_settings_flow(
    id: str,
    x__session__token: Optional[str] = Header(None, alias='X-Session-Token'),
    cookie: Optional[str] = Header(None, alias='Cookie'),
) -> Union[SettingsFlow, ErrorGeneric]:
    """
    Get Settings Flow
    """
    pass


@router.post(
    '/self-service/verification',
    response_model=VerificationFlow,
    responses={
        '400': {'model': VerificationFlow},
        '410': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def update_verification_flow(
    flow: str,
    token: Optional[str] = None,
    cookie: Optional[str] = Header(None, alias='Cookie'),
    body: Union[
        UpdateVerificationFlowWithLinkMethod, UpdateVerificationFlowWithCodeMethod
    ] = ...,
) -> Union[VerificationFlow, ErrorGeneric]:
    """
    Complete Verification Flow
    """
    pass


@router.get(
    '/self-service/verification/api',
    response_model=VerificationFlow,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def create_native_verification_flow(
    return_to: Optional[str] = None,
) -> Union[VerificationFlow, ErrorGeneric]:
    """
    Create Verification Flow for Native Apps
    """
    pass


@router.get(
    '/self-service/verification/browser',
    response_model=VerificationFlow,
    responses={'default': {'model': ErrorGeneric}},
    tags=['frontend'],
)
def create_browser_verification_flow(
    return_to: Optional[str] = None,
) -> Union[VerificationFlow, ErrorGeneric]:
    """
    Create Verification Flow for Browser Clients
    """
    pass


@router.get(
    '/self-service/verification/flows',
    response_model=VerificationFlow,
    responses={
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def get_verification_flow(
    id: str, cookie: Optional[str] = None
) -> Union[VerificationFlow, ErrorGeneric]:
    """
    Get Verification Flow
    """
    pass


@router.delete(
    '/sessions',
    response_model=DeleteMySessionsCount,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def disable_my_other_sessions(
    x__session__token: Optional[str] = Header(None, alias='X-Session-Token'),
    cookie: Optional[str] = Header(None, alias='Cookie'),
) -> Union[DeleteMySessionsCount, ErrorGeneric]:
    """
    Disable my other sessions
    """
    pass


@router.get(
    '/sessions',
    response_model=List[Session],
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def list_my_sessions(
    per_page: Optional[conint(ge=1, le=1000)] = 250,
    page: Optional[int] = None,
    page_size: Optional[conint(ge=1, le=500)] = 250,
    page_token: Optional[str] = '1',
    x__session__token: Optional[str] = Header(None, alias='X-Session-Token'),
    cookie: Optional[str] = Header(None, alias='Cookie'),
) -> Union[List[Session], ErrorGeneric]:
    """
    Get My Active Sessions
    """
    pass


@router.get(
    '/sessions/token-exchange',
    response_model=SuccessfulNativeLogin,
    responses={
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        '410': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def exchange_session_token(
    init_code: str, return_to_code: str = ...
) -> Union[SuccessfulNativeLogin, ErrorGeneric]:
    """
    Exchange Session Token
    """
    pass


@router.get(
    '/sessions/whoami',
    response_model=Session,
    responses={
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def to_session(
    x__session__token: Optional[str] = Header(None, alias='X-Session-Token'),
    cookie: Optional[str] = Header(None, alias='Cookie'),
    tokenize_as: Optional[str] = None,
) -> Union[Session, ErrorGeneric]:
    """
    Check Who the Current HTTP Session Belongs To
    """
    pass


@router.delete(
    '/sessions/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['frontend'],
)
def disable_my_session(
    id: str,
    x__session__token: Optional[str] = Header(None, alias='X-Session-Token'),
    cookie: Optional[str] = Header(None, alias='Cookie'),
) -> Optional[ErrorGeneric]:
    """
    Disable one of my sessions
    """
    pass
