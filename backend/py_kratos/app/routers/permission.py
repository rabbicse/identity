# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2024-10-22T11:04:04+00:00

from __future__ import annotations

from fastapi import APIRouter

from ..dependencies import *

router = APIRouter(tags=['permission'])


@router.post(
    '/relation-tuples/batch/check',
    response_model=BatchCheckPermissionResult,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['permission'],
)
def batch_check_permission(
    max_depth: Optional[int] = Query(None, alias='max-depth'),
    body: BatchCheckPermissionBody = None,
) -> Union[BatchCheckPermissionResult, ErrorGeneric]:
    """
    Batch check permissions
    """
    pass


@router.get(
    '/relation-tuples/check',
    response_model=CheckPermissionResult,
    responses={
        '400': {'model': ErrorGeneric},
        '403': {'model': CheckPermissionResult},
        'default': {'model': ErrorGeneric},
    },
    tags=['permission'],
)
def check_permission_or_error(
    namespace: Optional[str] = None,
    object: Optional[str] = None,
    relation: Optional[str] = None,
    subject_id: Optional[str] = None,
    subject_set_namespace: Optional[str] = Query(None, alias='subject_set.namespace'),
    subject_set_object: Optional[str] = Query(None, alias='subject_set.object'),
    subject_set_relation: Optional[str] = Query(None, alias='subject_set.relation'),
    max_depth: Optional[int] = Query(None, alias='max-depth'),
) -> Union[CheckPermissionResult, ErrorGeneric]:
    """
    Check a permission
    """
    pass


@router.post(
    '/relation-tuples/check',
    response_model=CheckPermissionResult,
    responses={
        '400': {'model': ErrorGeneric},
        '403': {'model': CheckPermissionResult},
        'default': {'model': ErrorGeneric},
    },
    tags=['permission'],
)
def post_check_permission_or_error(
    max_depth: Optional[int] = Query(None, alias='max-depth'),
    body: PostCheckPermissionOrErrorBody = None,
) -> Union[CheckPermissionResult, ErrorGeneric]:
    """
    Check a permission
    """
    pass


@router.get(
    '/relation-tuples/check/openapi',
    response_model=CheckPermissionResult,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['permission'],
)
def check_permission(
    namespace: Optional[str] = None,
    object: Optional[str] = None,
    relation: Optional[str] = None,
    subject_id: Optional[str] = None,
    subject_set_namespace: Optional[str] = Query(None, alias='subject_set.namespace'),
    subject_set_object: Optional[str] = Query(None, alias='subject_set.object'),
    subject_set_relation: Optional[str] = Query(None, alias='subject_set.relation'),
    max_depth: Optional[int] = Query(None, alias='max-depth'),
) -> Union[CheckPermissionResult, ErrorGeneric]:
    """
    Check a permission
    """
    pass


@router.post(
    '/relation-tuples/check/openapi',
    response_model=CheckPermissionResult,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['permission'],
)
def post_check_permission(
    max_depth: Optional[int] = Query(None, alias='max-depth'),
    body: PostCheckPermissionBody = None,
) -> Union[CheckPermissionResult, ErrorGeneric]:
    """
    Check a permission
    """
    pass


@router.get(
    '/relation-tuples/expand',
    response_model=ExpandedPermissionTree,
    responses={
        '400': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['permission'],
)
def expand_permissions(
    namespace: str,
    object: str = ...,
    relation: str = ...,
    max_depth: Optional[int] = Query(None, alias='max-depth'),
) -> Union[ExpandedPermissionTree, ErrorGeneric]:
    """
    Expand a Relationship into permissions.
    """
    pass
