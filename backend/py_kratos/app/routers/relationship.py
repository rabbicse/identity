# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2024-10-22T11:04:04+00:00

from __future__ import annotations

from fastapi import APIRouter

from ..dependencies import *

router = APIRouter(tags=['relationship'])


@router.delete(
    '/admin/relation-tuples',
    response_model=None,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['relationship'],
)
def delete_relationships(
    namespace: Optional[str] = None,
    object: Optional[str] = None,
    relation: Optional[str] = None,
    subject_id: Optional[str] = None,
    subject_set_namespace: Optional[str] = Query(None, alias='subject_set.namespace'),
    subject_set_object: Optional[str] = Query(None, alias='subject_set.object'),
    subject_set_relation: Optional[str] = Query(None, alias='subject_set.relation'),
) -> Optional[ErrorGeneric]:
    """
    Delete Relationships
    """
    pass


@router.patch(
    '/admin/relation-tuples',
    response_model=None,
    responses={
        '400': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['relationship'],
)
def patch_relationships(body: List[RelationshipPatch] = None) -> Optional[ErrorGeneric]:
    """
    Patch Multiple Relationships
    """
    pass


@router.put(
    '/admin/relation-tuples',
    response_model=None,
    responses={
        '201': {'model': Relationship},
        '400': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['relationship'],
)
def create_relationship(
    body: CreateRelationshipBody = None,
) -> Optional[Union[Relationship, ErrorGeneric]]:
    """
    Create a Relationship
    """
    pass


@router.get(
    '/namespaces',
    response_model=RelationshipNamespaces,
    responses={'default': {'model': ErrorGeneric}},
    tags=['relationship'],
)
def list_relationship_namespaces() -> Union[RelationshipNamespaces, ErrorGeneric]:
    """
    Query namespaces
    """
    pass


@router.post(
    '/opl/syntax/check',
    response_model=CheckOplSyntaxResult,
    responses={'400': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['relationship'],
)
def check_opl_syntax() -> Union[CheckOplSyntaxResult, ErrorGeneric]:
    """
    Check the syntax of an OPL file
    """
    pass


@router.get(
    '/relation-tuples',
    response_model=Relationships,
    responses={'404': {'model': ErrorGeneric}, 'default': {'model': ErrorGeneric}},
    tags=['relationship'],
)
def get_relationships(
    page_token: Optional[str] = None,
    page_size: Optional[int] = None,
    namespace: Optional[str] = None,
    object: Optional[str] = None,
    relation: Optional[str] = None,
    subject_id: Optional[str] = None,
    subject_set_namespace: Optional[str] = Query(None, alias='subject_set.namespace'),
    subject_set_object: Optional[str] = Query(None, alias='subject_set.object'),
    subject_set_relation: Optional[str] = Query(None, alias='subject_set.relation'),
) -> Union[Relationships, ErrorGeneric]:
    """
    Query relationships
    """
    pass
