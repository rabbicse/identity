# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2024-10-22T11:04:04+00:00

from __future__ import annotations

from fastapi import APIRouter

from ..dependencies import *

router = APIRouter(tags=['project'])


@router.get(
    '/projects',
    response_model=List[ProjectMetadata],
    responses={
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def list_projects() -> Union[List[ProjectMetadata], ErrorGeneric]:
    """
    List All Projects
    """
    pass


@router.post(
    '/projects',
    response_model=None,
    responses={
        '201': {'model': Project},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def create_project(
    body: CreateProjectBody = None,
) -> Optional[Union[Project, ErrorGeneric]]:
    """
    Create a Project
    """
    pass


@router.delete(
    '/projects/{project_id}',
    response_model=None,
    responses={
        '401': {'model': GenericError},
        '403': {'model': GenericError},
        '404': {'model': GenericError},
        'default': {'model': GenericError},
    },
    tags=['project'],
)
def purge_project(project_id: str) -> Optional[GenericError]:
    """
    Irrecoverably purge a project
    """
    pass


@router.get(
    '/projects/{project_id}',
    response_model=Project,
    responses={
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def get_project(project_id: str) -> Union[Project, ErrorGeneric]:
    """
    Get a Project
    """
    pass


@router.patch(
    '/projects/{project_id}',
    response_model=SuccessfulProjectUpdate,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def patch_project(
    project_id: str, body: List[JsonPatch] = None
) -> Union[SuccessfulProjectUpdate, ErrorGeneric]:
    """
    Patch an Ory Network Project Configuration
    """
    pass


@router.put(
    '/projects/{project_id}',
    response_model=SuccessfulProjectUpdate,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def set_project(
    project_id: str, body: SetProject = None
) -> Union[SuccessfulProjectUpdate, ErrorGeneric]:
    """
    Update an Ory Network Project Configuration
    """
    pass


@router.get(
    '/projects/{project_id}/organizations',
    response_model=ListOrganizationsResponse,
    responses={
        '400': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def list_organizations(
    page_size: Optional[conint(ge=1, le=1000)] = 250,
    page_token: Optional[str] = None,
    project_id: str = ...,
    domain: Optional[str] = None,
) -> Union[ListOrganizationsResponse, ErrorGeneric]:
    """
    List all Enterprise SSO organizations
    """
    pass


@router.post(
    '/projects/{project_id}/organizations',
    response_model=None,
    responses={
        '201': {'model': Organization},
        '400': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '409': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def create_organization(
    project_id: str, body: OrganizationBody = None
) -> Optional[Union[Organization, ErrorGeneric]]:
    """
    Create an Enterprise SSO Organization
    """
    pass


@router.delete(
    '/projects/{project_id}/organizations/{organization_id}',
    response_model=None,
    responses={
        '400': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        '409': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def delete_organization(
    project_id: str, organization_id: str = ...
) -> Optional[ErrorGeneric]:
    """
    Delete Enterprise SSO Organization
    """
    pass


@router.get(
    '/projects/{project_id}/organizations/{organization_id}',
    response_model=GetOrganizationResponse,
    responses={
        '400': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def get_organization(
    project_id: str, organization_id: str = ...
) -> Union[GetOrganizationResponse, ErrorGeneric]:
    """
    Get Enterprise SSO Organization by ID
    """
    pass


@router.put(
    '/projects/{project_id}/organizations/{organization_id}',
    response_model=Organization,
    responses={
        '400': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        '409': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def update_organization(
    project_id: str, organization_id: str = ..., body: OrganizationBody = None
) -> Union[Organization, ErrorGeneric]:
    """
    Update an Enterprise SSO Organization
    """
    pass


@router.patch(
    '/projects/{project_id}/revision/{revision_id}',
    response_model=SuccessfulProjectUpdate,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '404': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['project'],
)
def patch_project_with_revision(
    project_id: str, revision_id: str = ..., body: List[JsonPatch] = None
) -> Union[SuccessfulProjectUpdate, ErrorGeneric]:
    """
    Patch an Ory Network Project Configuration based on a revision ID
    """
    pass


@router.get(
    '/projects/{project}/members',
    response_model=List[ProjectMember],
    responses={
        '401': {'model': GenericError},
        '406': {'model': GenericError},
        'default': {'model': GenericError},
    },
    tags=['project'],
)
def get_project_members(project: str) -> Union[List[ProjectMember], GenericError]:
    """
    Get all members associated with this project
    """
    pass


@router.delete(
    '/projects/{project}/members/{member}',
    response_model=None,
    responses={
        '401': {'model': GenericError},
        '406': {'model': GenericError},
        'default': {'model': GenericError},
    },
    tags=['project'],
)
def remove_project_member(project: str, member: str = ...) -> Optional[GenericError]:
    """
    Remove a member associated with this project
    """
    pass


@router.get(
    '/projects/{project}/tokens',
    response_model=List[ProjectApiKey],
    responses={'default': {'model': ErrorGeneric}},
    tags=['project'],
)
def list_project_api_keys(project: str) -> Union[List[ProjectApiKey], ErrorGeneric]:
    """
    List a project's API Tokens
    """
    pass


@router.post(
    '/projects/{project}/tokens',
    response_model=None,
    responses={'201': {'model': ProjectApiKey}, 'default': {'model': ErrorGeneric}},
    tags=['project'],
)
def create_project_api_key(
    project: str, body: ProjectsProjectTokensPostRequest = None
) -> Optional[Union[ProjectApiKey, ErrorGeneric]]:
    """
    Create project API token
    """
    pass


@router.delete(
    '/projects/{project}/tokens/{token_id}',
    response_model=None,
    responses={'default': {'model': ErrorGeneric}},
    tags=['project'],
)
def delete_project_api_key(project: str, token_id: str = ...) -> Optional[ErrorGeneric]:
    """
    Delete project API token
    """
    pass
