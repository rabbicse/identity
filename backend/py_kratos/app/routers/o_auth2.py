# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2024-10-22T11:04:04+00:00

from __future__ import annotations

from fastapi import APIRouter

from ..dependencies import *

router = APIRouter(tags=['oAuth2'])


@router.get(
    '/admin/clients',
    response_model=List[OAuth2Client],
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def list_o_auth2_clients(
    page_size: Optional[conint(ge=1, le=500)] = 250,
    page_token: Optional[str] = '1',
    client_name: Optional[str] = None,
    owner: Optional[str] = None,
) -> Union[List[OAuth2Client], ErrorOAuth2]:
    """
    List OAuth 2.0 Clients
    """
    pass


@router.post(
    '/admin/clients',
    response_model=None,
    responses={
        '201': {'model': OAuth2Client},
        '400': {'model': ErrorOAuth2},
        'default': {'model': ErrorOAuth2},
    },
    tags=['oAuth2'],
)
def create_o_auth2_client(
    body: OAuth2Client,
) -> Optional[Union[OAuth2Client, ErrorOAuth2]]:
    """
    Create OAuth 2.0 Client
    """
    pass


@router.delete(
    '/admin/clients/{id}',
    response_model=None,
    responses={'default': {'model': GenericError}},
    tags=['oAuth2'],
)
def delete_o_auth2_client(id: str) -> Optional[GenericError]:
    """
    Delete OAuth 2.0 Client
    """
    pass


@router.get(
    '/admin/clients/{id}',
    response_model=OAuth2Client,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def get_o_auth2_client(id: str) -> Union[OAuth2Client, ErrorOAuth2]:
    """
    Get an OAuth 2.0 Client
    """
    pass


@router.patch(
    '/admin/clients/{id}',
    response_model=OAuth2Client,
    responses={'404': {'model': ErrorOAuth2}, 'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def patch_o_auth2_client(
    id: str, body: List[JsonPatch] = ...
) -> Union[OAuth2Client, ErrorOAuth2]:
    """
    Patch OAuth 2.0 Client
    """
    pass


@router.put(
    '/admin/clients/{id}',
    response_model=OAuth2Client,
    responses={
        '400': {'model': ErrorOAuth2},
        '404': {'model': ErrorOAuth2},
        'default': {'model': ErrorOAuth2},
    },
    tags=['oAuth2'],
)
def set_o_auth2_client(
    id: str, body: OAuth2Client = ...
) -> Union[OAuth2Client, ErrorOAuth2]:
    """
    Set OAuth 2.0 Client
    """
    pass


@router.put(
    '/admin/clients/{id}/lifespans',
    response_model=OAuth2Client,
    responses={'default': {'model': GenericError}},
    tags=['oAuth2'],
)
def set_o_auth2_client_lifespans(
    id: str, body: OAuth2ClientTokenLifespans = None
) -> Union[OAuth2Client, GenericError]:
    """
    Set OAuth2 Client Token Lifespans
    """
    pass


@router.get(
    '/admin/oauth2/auth/requests/consent',
    response_model=OAuth2ConsentRequest,
    responses={'410': {'model': OAuth2RedirectTo}, 'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def get_o_auth2_consent_request(
    consent_challenge: str,
) -> Union[OAuth2ConsentRequest, OAuth2RedirectTo, ErrorOAuth2]:
    """
    Get OAuth 2.0 Consent Request
    """
    pass


@router.put(
    '/admin/oauth2/auth/requests/consent/accept',
    response_model=OAuth2RedirectTo,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def accept_o_auth2_consent_request(
    consent_challenge: str, body: AcceptOAuth2ConsentRequest = None
) -> Union[OAuth2RedirectTo, ErrorOAuth2]:
    """
    Accept OAuth 2.0 Consent Request
    """
    pass


@router.put(
    '/admin/oauth2/auth/requests/consent/reject',
    response_model=OAuth2RedirectTo,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def reject_o_auth2_consent_request(
    consent_challenge: str, body: RejectOAuth2Request = None
) -> Union[OAuth2RedirectTo, ErrorOAuth2]:
    """
    Reject OAuth 2.0 Consent Request
    """
    pass


@router.get(
    '/admin/oauth2/auth/requests/login',
    response_model=OAuth2LoginRequest,
    responses={'410': {'model': OAuth2RedirectTo}, 'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def get_o_auth2_login_request(
    login_challenge: str,
) -> Union[OAuth2LoginRequest, OAuth2RedirectTo, ErrorOAuth2]:
    """
    Get OAuth 2.0 Login Request
    """
    pass


@router.put(
    '/admin/oauth2/auth/requests/login/accept',
    response_model=OAuth2RedirectTo,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def accept_o_auth2_login_request(
    login_challenge: str, body: AcceptOAuth2LoginRequest = None
) -> Union[OAuth2RedirectTo, ErrorOAuth2]:
    """
    Accept OAuth 2.0 Login Request
    """
    pass


@router.put(
    '/admin/oauth2/auth/requests/login/reject',
    response_model=OAuth2RedirectTo,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def reject_o_auth2_login_request(
    login_challenge: str, body: RejectOAuth2Request = None
) -> Union[OAuth2RedirectTo, ErrorOAuth2]:
    """
    Reject OAuth 2.0 Login Request
    """
    pass


@router.get(
    '/admin/oauth2/auth/requests/logout',
    response_model=OAuth2LogoutRequest,
    responses={'410': {'model': OAuth2RedirectTo}, 'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def get_o_auth2_logout_request(
    logout_challenge: str,
) -> Union[OAuth2LogoutRequest, OAuth2RedirectTo, ErrorOAuth2]:
    """
    Get OAuth 2.0 Session Logout Request
    """
    pass


@router.put(
    '/admin/oauth2/auth/requests/logout/accept',
    response_model=OAuth2RedirectTo,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def accept_o_auth2_logout_request(
    logout_challenge: str,
) -> Union[OAuth2RedirectTo, ErrorOAuth2]:
    """
    Accept OAuth 2.0 Session Logout Request
    """
    pass


@router.put(
    '/admin/oauth2/auth/requests/logout/reject',
    response_model=None,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def reject_o_auth2_logout_request(logout_challenge: str) -> Optional[ErrorOAuth2]:
    """
    Reject OAuth 2.0 Session Logout Request
    """
    pass


@router.delete(
    '/admin/oauth2/auth/sessions/consent',
    response_model=None,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def revoke_o_auth2_consent_sessions(
    subject: str, client: Optional[str] = None, all: Optional[bool] = None
) -> Optional[ErrorOAuth2]:
    """
    Revoke OAuth 2.0 Consent Sessions of a Subject
    """
    pass


@router.get(
    '/admin/oauth2/auth/sessions/consent',
    response_model=List[OAuth2ConsentSession],
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def list_o_auth2_consent_sessions(
    page_size: Optional[conint(ge=1, le=500)] = 250,
    page_token: Optional[str] = '1',
    subject: str = ...,
    login_session_id: Optional[str] = None,
) -> Union[List[OAuth2ConsentSession], ErrorOAuth2]:
    """
    List OAuth 2.0 Consent Sessions of a Subject
    """
    pass


@router.delete(
    '/admin/oauth2/auth/sessions/login',
    response_model=None,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def revoke_o_auth2_login_sessions(
    subject: Optional[str] = None, sid: Optional[str] = None
) -> Optional[ErrorOAuth2]:
    """
    Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
    """
    pass


@router.post(
    '/admin/oauth2/introspect',
    response_model=IntrospectedOAuth2Token,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def introspect_o_auth2_token(
    request: Request,
) -> Union[IntrospectedOAuth2Token, ErrorOAuth2]:
    """
    Introspect OAuth2 Access and Refresh Tokens
    """
    pass


@router.delete(
    '/admin/oauth2/tokens',
    response_model=None,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def delete_o_auth2_token(client_id: str) -> Optional[ErrorOAuth2]:
    """
    Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
    """
    pass


@router.get(
    '/admin/trust/grants/jwt-bearer/issuers',
    response_model=List[TrustedOAuth2JwtGrantIssuer],
    responses={'default': {'model': GenericError}},
    tags=['oAuth2'],
)
def list_trusted_o_auth2_jwt_grant_issuers(
    max_items: Optional[int] = Query(None, alias='MaxItems'),
    default_items: Optional[int] = Query(None, alias='DefaultItems'),
    issuer: Optional[str] = None,
) -> Union[List[TrustedOAuth2JwtGrantIssuer], GenericError]:
    """
    List Trusted OAuth2 JWT Bearer Grant Type Issuers
    """
    pass


@router.post(
    '/admin/trust/grants/jwt-bearer/issuers',
    response_model=None,
    responses={
        '201': {'model': TrustedOAuth2JwtGrantIssuer},
        'default': {'model': GenericError},
    },
    tags=['oAuth2'],
)
def trust_o_auth2_jwt_grant_issuer(
    body: TrustOAuth2JwtGrantIssuer = None,
) -> Optional[Union[TrustedOAuth2JwtGrantIssuer, GenericError]]:
    """
    Trust OAuth2 JWT Bearer Grant Type Issuer
    """
    pass


@router.delete(
    '/admin/trust/grants/jwt-bearer/issuers/{id}',
    response_model=None,
    responses={'default': {'model': GenericError}},
    tags=['oAuth2'],
)
def delete_trusted_o_auth2_jwt_grant_issuer(id: str) -> Optional[GenericError]:
    """
    Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
    """
    pass


@router.get(
    '/admin/trust/grants/jwt-bearer/issuers/{id}',
    response_model=TrustedOAuth2JwtGrantIssuer,
    responses={'default': {'model': GenericError}},
    tags=['oAuth2'],
)
def get_trusted_o_auth2_jwt_grant_issuer(
    id: str,
) -> Union[TrustedOAuth2JwtGrantIssuer, GenericError]:
    """
    Get Trusted OAuth2 JWT Bearer Grant Type Issuer
    """
    pass


@router.get(
    '/oauth2/auth',
    response_model=None,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def o_auth2_authorize() -> Optional[ErrorOAuth2]:
    """
    OAuth 2.0 Authorize Endpoint
    """
    pass


@router.post(
    '/oauth2/revoke',
    response_model=None,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def revoke_o_auth2_token(request: Request) -> Optional[ErrorOAuth2]:
    """
    Revoke OAuth 2.0 Access or Refresh Token
    """
    pass


@router.post(
    '/oauth2/token',
    response_model=OAuth2TokenExchange,
    responses={'default': {'model': ErrorOAuth2}},
    tags=['oAuth2'],
)
def oauth2_token_exchange(request: Request) -> Union[OAuth2TokenExchange, ErrorOAuth2]:
    """
    The OAuth 2.0 Token Endpoint
    """
    pass
