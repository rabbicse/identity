# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2024-10-22T11:04:04+00:00

from __future__ import annotations

from fastapi import APIRouter

from ..dependencies import *

router = APIRouter(tags=['workspace'])


@router.get(
    '/workspaces',
    response_model=ListWorkspaces,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '500': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['workspace'],
)
def list_workspaces(
    page_size: Optional[conint(ge=1, le=1000)] = 250, page_token: Optional[str] = None
) -> Union[ListWorkspaces, ErrorGeneric]:
    """
    List workspaces the user is a member of
    """
    pass


@router.post(
    '/workspaces',
    response_model=None,
    responses={
        '201': {'model': Workspace},
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '500': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['workspace'],
)
def create_workspace(
    body: CreateWorkspaceBody = None,
) -> Optional[Union[Workspace, ErrorGeneric]]:
    """
    Create a new workspace
    """
    pass


@router.get(
    '/workspaces/{workspace}',
    response_model=Workspace,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '500': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['workspace'],
)
def get_workspace(workspace: str) -> Union[Workspace, ErrorGeneric]:
    """
    Get a workspace
    """
    pass


@router.put(
    '/workspaces/{workspace}',
    response_model=Workspace,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '500': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['workspace'],
)
def update_workspace(
    workspace: str, body: UpdateWorkspaceBody = None
) -> Union[Workspace, ErrorGeneric]:
    """
    Update an workspace
    """
    pass


@router.get(
    '/workspaces/{workspace}/projects',
    response_model=ListWorkspaceProjects,
    responses={
        '400': {'model': ErrorGeneric},
        '401': {'model': ErrorGeneric},
        '403': {'model': ErrorGeneric},
        '500': {'model': ErrorGeneric},
        'default': {'model': ErrorGeneric},
    },
    tags=['workspace'],
)
def list_workspace_projects(
    workspace: str,
) -> Union[ListWorkspaceProjects, ErrorGeneric]:
    """
    List all projects of a workspace
    """
    pass


@router.get(
    '/workspaces/{workspace}/tokens',
    response_model=List[WorkspaceApiKey],
    responses={'default': {'model': ErrorGeneric}},
    tags=['workspace'],
)
def list_workspace_api_keys(
    workspace: str,
) -> Union[List[WorkspaceApiKey], ErrorGeneric]:
    """
    List a workspace's API Tokens
    """
    pass


@router.post(
    '/workspaces/{workspace}/tokens',
    response_model=None,
    responses={'201': {'model': WorkspaceApiKey}, 'default': {'model': ErrorGeneric}},
    tags=['workspace'],
)
def create_workspace_api_key(
    workspace: str, body: CreateWorkspaceApiKeyBody = None
) -> Optional[Union[WorkspaceApiKey, ErrorGeneric]]:
    """
    Create workspace API key
    """
    pass


@router.delete(
    '/workspaces/{workspace}/tokens/{token_id}',
    response_model=None,
    responses={'default': {'model': ErrorGeneric}},
    tags=['workspace'],
)
def delete_workspace_api_key(
    workspace: str, token_id: str = ...
) -> Optional[ErrorGeneric]:
    """
    Delete workspace API token
    """
    pass
